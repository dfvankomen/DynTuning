
N_200_data = """0,0.0373229
1,0.0297231
2,0.0297222
3,0.0297354
4,0.0297237
5,0.0297519
6,0.029729
7,0.0229877
8,0.0166035
9,0.0168097
10,0.0165706
0,0.0291931
1,0.0287715
2,0.0287529
3,0.0287451
4,0.0287496
5,0.028752
6,0.0254605
7,0.0167977
8,0.0165822
9,0.0168008
10,0.0165747
0,0.0170474
1,0.0166254
2,0.0166547
3,0.0166295
4,0.016622
5,0.0166176
6,0.0163969
7,0.0166159
8,0.0166484
9,0.0164048
10,0.0163949
0,0.0393652
1,0.0389864
2,0.0363149
3,0.0283044
4,0.0283015
5,0.0283456
6,0.0283275
7,0.0282996
8,0.0282815
9,0.0267015
10,0.0167906
0,0.0170437
1,0.0164437
2,0.0164114
3,0.0164207
4,0.0163985
5,0.0166195
6,0.0164094
7,0.0164046
8,0.0164032
9,0.0164049
10,0.0166202
"""

N_100_data = """0,0.00300671
1,0.00257648
2,0.00257259
3,0.0025728
4,0.00256826
5,0.00256805
6,0.00256889
7,0.0025702
8,0.00256736
9,0.00256651
10,0.00256815
0,0.00289182
1,0.00247173
2,0.00246506
3,0.00246474
4,0.00246214
5,0.00246037
6,0.00246037
7,0.00246351
8,0.0024637
9,0.00245963
10,0.00245954
0,0.00263203
1,0.00219202
2,0.0021877
3,0.00218827
4,0.00219377
5,0.00218385
6,0.00218366
7,0.00218718
8,0.00218726
9,0.00218344
10,0.00218313
0,0.00264244
1,0.0021933
2,0.00220028
3,0.00218941
4,0.0021854
5,0.00218433
6,0.00218606
7,0.00218353
8,0.00218745
9,0.00218497
10,0.00218566
0,0.00338328
1,0.00283166
2,0.0028243
3,0.00282687
4,0.00281804
5,0.00281663
6,0.00282383
7,0.00287524
8,0.00283069
9,0.00282055
10,0.00281739"""

N_400_data = """0,0.334607
1,0.242814
2,0.242797
3,0.242778
4,0.242739
5,0.242735
6,0.242734
7,0.242667
8,0.242725
9,0.242794
10,0.242724
0,0.243187
1,0.242726
2,0.242806
3,0.242832
4,0.242788
5,0.242779
6,0.242733
7,0.242731
8,0.24275
9,0.242719
10,0.242673
0,0.243183
1,0.24278
2,0.242781
3,0.242799
4,0.242741
5,0.242744
6,0.242756
7,0.242662
8,0.242748
9,0.242775
10,0.242756
0,0.243245
1,0.242806
2,0.243714
3,0.242869
4,0.24281
5,0.242853
6,0.242885
7,0.24285
8,0.242842
9,0.242752
10,0.242755
0,0.363402
1,0.242737
2,0.242721
3,0.24285
4,0.242774
5,0.24276
6,0.24278
7,0.242749
8,0.242723
9,0.242737
10,0.242678"""

N_300_data = """0,0.085721
1,0.0853354
2,0.0853258
3,0.0853188
4,0.0852971
5,0.0853028
6,0.0853063
7,0.0853311
8,0.0853287
9,0.0853463
10,0.085321
0,0.0858805
1,0.0853097
2,0.0853218
3,0.0853188
4,0.0852971
5,0.0852997
6,0.0853224
7,0.0853206
8,0.085326
9,0.0853354
10,0.0853105
0,0.0865286
1,0.0854268
2,0.0853274
3,0.0853312
4,0.0853408
5,0.0853347
6,0.085302
7,0.0853215
8,0.0853163
9,0.0853385
10,0.0853319
0,0.0860072
1,0.0853342
2,0.0853509
3,0.0853712
4,0.0853351
5,0.0853247
6,0.0852958
7,0.0852901
8,0.0853005
9,0.085281
10,0.0852905
0,0.128318
1,0.103539
2,0.0858072
3,0.0853147
4,0.0853118
5,0.0853165
6,0.0852921
7,0.0853173
8,0.0853341
9,0.0852999
10,0.0852933"""


# calculate the averages and then plot
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def get_averages(instr):
    storage = {}
    for dta in instr.splitlines():
        blks, time = dta.split(",")
        blks, time = int(blks), float(time)

        temp = storage.get(blks, 0)
        storage[blks] = temp + time

    # flatten to numpy arrays
    blks = np.array(list(storage.keys()))
    blks = np.sort(blks)

    arr = []
    for blk in blks:
        arr.append(storage[blk] / 5)
    
    return blks, np.array(arr)


n100_blks, n100_times = get_averages(N_100_data)
n200_blks, n200_times = get_averages(N_200_data)
n300_blks, n300_times = get_averages(N_300_data)
n400_blks, n400_times = get_averages(N_400_data)

plt.scatter(n100_blks, n100_times, color=sns.color_palette("crest", n_colors=4)[0], label="N=100")
plt.scatter(n200_blks, n200_times, color=sns.color_palette("crest", n_colors=4)[1], label="N=200")
plt.scatter(n300_blks, n300_times, color=sns.color_palette("crest", n_colors=4)[2], label="N=300")
plt.scatter(n400_blks, n400_times, color=sns.color_palette("crest", n_colors=4)[3], label="N=400")
plt.yscale('log')
plt.grid()
plt.ylabel("Execution Time (s)")
plt.xlabel("Min Number of Blocks")
plt.title("Execution Time vs Minimum Number of Blocks")
plt.legend()

plt.savefig("SimpleBlockOutput.png")